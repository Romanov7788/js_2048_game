{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static gameStatuses = {\n        idle: \"idle\",\n        playing: \"playing\",\n        lose: \"lose\",\n        win: \"win\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.idle;\n    }\n    saveBoardState() {\n        return JSON.parse(JSON.stringify(this.board));\n    }\n    hasBoardChanged(oldBoard, newBoard) {\n        for(let i = 0; i < oldBoard.length; i++)for(let j = 0; j < oldBoard[i].length; j++){\n            if (oldBoard[i][j] !== newBoard[i][j]) return true;\n        }\n        return false;\n    }\n    addCells(count = 1) {\n        for(let i = 0; i < count; i++)this.addRandomTitle();\n    }\n    initializeGame(message = \"\") {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.addCells(2);\n        this.updateScoreDisplay();\n        this.showMessage(message);\n    }\n    updateScoreDisplay() {\n        const scoreElement = document.querySelector(\".game-score\");\n        if (scoreElement) scoreElement.textContent = this.score;\n    }\n    createEmptyBoard() {\n        return Array(4).fill(null).map(()=>Array(4).fill(0));\n    }\n    updateBoardDisplay() {\n        const { board: board } = this;\n        const cells = document.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            cell.textContent = board[row][col] === 0 ? \"\" : board[row][col];\n            cell.className = \"field-cell\";\n            if (board[row][col] !== 0) cell.classList.add(`tile-${board[row][col]}`);\n        });\n    }\n    addRandomTitle() {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const [randomRow, randomCol] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n        this.updateBoardDisplay();\n    }\n    moveLeft() {\n        const { board: board } = this;\n        const oldBoard = this.saveBoardState();\n        const newBoard = Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        let score = 0;\n        for(let i = 0; i < 4; i++){\n            let position = 0;\n            for(let j = 0; j < 4; j++)if (board[i][j] !== 0) {\n                if (newBoard[i][position] === board[i][j]) {\n                    newBoard[i][position] *= 2;\n                    score += newBoard[i][position];\n                    position++;\n                } else if (newBoard[i][position] === 0) newBoard[i][position] = board[i][j];\n                else {\n                    position++;\n                    newBoard[i][position] = board[i][j];\n                }\n            }\n        }\n        this.score += score;\n        this.board = newBoard;\n        if (this.hasBoardChanged(oldBoard, this.board)) this.addRandomTitle();\n        this.updateBoardDisplay();\n        this.updateScoreDisplay();\n        return this.score;\n    }\n    moveRight() {\n        const { board: board } = this;\n        const oldBoard = this.saveBoardState();\n        const newBoard = Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        let score = 0;\n        for(let i = 0; i < 4; i++){\n            let position = 3;\n            for(let j = 3; j >= 0; j--)if (board[i][j] !== 0) {\n                if (newBoard[i][position] === board[i][j]) {\n                    newBoard[i][position] *= 2;\n                    score += newBoard[i][position];\n                    position--;\n                } else if (newBoard[i][position] === 0) newBoard[i][position] = board[i][j];\n                else {\n                    position--;\n                    newBoard[i][position] = board[i][j];\n                }\n            }\n        }\n        this.score += score;\n        this.board = newBoard;\n        if (this.hasBoardChanged(oldBoard, this.board)) this.addRandomTitle();\n        this.updateScoreDisplay();\n        return this.score;\n    }\n    moveUp() {\n        const { board: board } = this;\n        const oldBoard = this.saveBoardState();\n        const newBoard = Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        let score = 0;\n        for(let j = 0; j < 4; j++){\n            let position = 0;\n            for(let i = 0; i < 4; i++)if (board[i][j] !== 0) {\n                if (newBoard[position][j] === board[i][j]) {\n                    newBoard[position][j] *= 2;\n                    score += newBoard[position][j];\n                    position++;\n                } else if (newBoard[position][j] === 0) newBoard[position][j] = board[i][j];\n                else {\n                    position++;\n                    newBoard[position][j] = board[i][j];\n                }\n            }\n        }\n        this.score += score;\n        this.board = newBoard;\n        if (this.hasBoardChanged(oldBoard, this.board)) this.addRandomTitle();\n        this.updateScoreDisplay();\n        return this.score;\n    }\n    moveDown() {\n        const { board: board } = this;\n        const oldBoard = this.saveBoardState();\n        const newBoard = Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        let score = 0;\n        for(let j = 0; j < 4; j++){\n            let position = 3;\n            for(let i = 3; i >= 0; i--)if (board[i][j] !== 0) {\n                if (newBoard[position][j] === board[i][j]) {\n                    newBoard[position][j] *= 2;\n                    score += newBoard[position][j];\n                    position--;\n                } else if (newBoard[position][j] === 0) newBoard[position][j] = board[i][j];\n                else {\n                    position--;\n                    newBoard[position][j] = board[i][j];\n                }\n            }\n        }\n        this.score += score;\n        this.board = newBoard;\n        if (this.hasBoardChanged(oldBoard, this.board)) this.addRandomTitle();\n        this.updateScoreDisplay();\n        return this.score;\n    }\n    checkWin() {\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.board[i][j] === 2048) {\n                this.showMessage($a5fd07fa01589658$var$Game.gameStatuses.win);\n                return true;\n            }\n        }\n        return false;\n    }\n    checkLose() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.board[i][j] === 0) return false;\n        }\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j] || j < 3 && this.board[i][j] === this.board[i][j + 1]) return false;\n        }\n        this.showMessage($a5fd07fa01589658$var$Game.gameStatuses.lose);\n        return true;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        if (this.checkWin()) return $a5fd07fa01589658$var$Game.gameStatuses.win;\n        else if (this.checkLose()) return $a5fd07fa01589658$var$Game.gameStatuses.lose;\n        else return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.playing;\n        this.initializeGame(\"start\");\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.idle;\n        this.initializeGame(\"Game restarted\");\n    }\n    showMessage(message) {\n        const messageContainer = document.querySelector(\".message-container\");\n        if (messageContainer) {\n            messageContainer.querySelector(\".message-start\").classList.add(\"hidden\");\n            messageContainer.querySelector(\".message-lose\").classList.add(\"hidden\");\n            messageContainer.querySelector(\".message-win\").classList.add(\"hidden\");\n        }\n        if (message === $a5fd07fa01589658$var$Game.gameStatuses.win) messageContainer.querySelector(\".message-win\").classList.remove(\"hidden\");\n        else if (message === $a5fd07fa01589658$var$Game.gameStatuses.lose) messageContainer.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.getElementById(\"startButton\");\nconst $09e991522ca7e64e$var$restartButton = document.getElementById(\"restartButton\");\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n$09e991522ca7e64e$var$restartButton.style.display = \"none\";\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$initializeGame();\n});\nfunction $09e991522ca7e64e$var$initializeGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$clearGameField();\n    $09e991522ca7e64e$var$refreshTable($09e991522ca7e64e$var$game.board);\n    $09e991522ca7e64e$var$updateGameField($09e991522ca7e64e$var$game.board);\n    $09e991522ca7e64e$var$startButton.style.display = \"none\";\n    $09e991522ca7e64e$var$restartButton.style.display = \"block\";\n}\nfunction $09e991522ca7e64e$var$clearGameField() {\n    const cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach((cell)=>{\n        cell.textContent = \"\";\n    });\n}\n$09e991522ca7e64e$var$restartButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$initializeGame();\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n});\nfunction $09e991522ca7e64e$var$updateGameField(board) {\n    const cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach((cell, index)=>{\n        const value = board[Math.floor(index / 4)][index % 4];\n        cell.textContent = value === 0 ? \"\" : value;\n    });\n    $09e991522ca7e64e$var$checkGameStatus();\n}\nfunction $09e991522ca7e64e$var$checkGameStatus() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === $a5fd07fa01589658$exports.gameStatuses.win || gameStatus === $a5fd07fa01589658$exports.gameStatuses.lose) document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n}\nfunction $09e991522ca7e64e$var$handleKeyPress(e) {\n    const moveActions = {\n        ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft(),\n        ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight(),\n        ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n        ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown()\n    };\n    const action = moveActions[e.key];\n    if (action) {\n        action();\n        $09e991522ca7e64e$var$checkGameStatusAfterMove();\n    }\n}\nfunction $09e991522ca7e64e$var$checkGameStatusAfterMove() {\n    if ($09e991522ca7e64e$var$game.checkWin()) $09e991522ca7e64e$var$checkGameStatus($a5fd07fa01589658$exports.gameStatuses.win);\n    else if ($09e991522ca7e64e$var$game.checkLose()) $09e991522ca7e64e$var$checkGameStatus($a5fd07fa01589658$exports.gameStatuses.lose);\n    $09e991522ca7e64e$var$refreshTable($09e991522ca7e64e$var$game.board);\n    $09e991522ca7e64e$var$updateGameField($09e991522ca7e64e$var$game.board);\n}\nfunction $09e991522ca7e64e$var$refreshTable(initialState) {\n    const fieldRows = document.querySelectorAll(\".field-row\");\n    fieldRows.forEach((row, rowIndex)=>{\n        const columns = row.children;\n        Array.from(columns).forEach((cell, columnIndex)=>{\n            const stateCell = initialState[rowIndex][columnIndex];\n            cell.className = \"field-cell field-cell--\" + stateCell;\n            cell.innerText = stateCell > 0 ? stateCell : \"\";\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.f0b3250e.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.getElementById('startButton');\nconst restartButton = document.getElementById('restartButton');\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nrestartButton.style.display = 'none';\n\nstartButton.addEventListener('click', () => {\n  initializeGame();\n});\n\nfunction initializeGame() {\n  game.start();\n  clearGameField();\n  refreshTable(game.board);\n  updateGameField(game.board);\n\n  startButton.style.display = 'none';\n  restartButton.style.display = 'block';\n}\n\nfunction clearGameField() {\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell) => {\n    cell.textContent = '';\n  });\n}\n\nrestartButton.addEventListener('click', () => {\n  game.restart();\n  initializeGame();\n  document.addEventListener('keydown', handleKeyPress);\n});\n\nfunction updateGameField(board) {\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const value = board[Math.floor(index / 4)][index % 4];\n\n    cell.textContent = value === 0 ? '' : value;\n  });\n\n  checkGameStatus();\n}\n\nfunction checkGameStatus() {\n  const gameStatus = game.getStatus();\n\n  if (\n    gameStatus === Game.gameStatuses.win ||\n    gameStatus === Game.gameStatuses.lose\n  ) {\n    document.removeEventListener('keydown', handleKeyPress);\n  }\n}\n\nfunction handleKeyPress(e) {\n  const moveActions = {\n    ArrowLeft: () => game.moveLeft(),\n    ArrowRight: () => game.moveRight(),\n    ArrowUp: () => game.moveUp(),\n    ArrowDown: () => game.moveDown(),\n  };\n\n  const action = moveActions[e.key];\n\n  if (action) {\n    action();\n    checkGameStatusAfterMove();\n  }\n}\n\nfunction checkGameStatusAfterMove() {\n  if (game.checkWin()) {\n    checkGameStatus(Game.gameStatuses.win);\n  } else if (game.checkLose()) {\n    checkGameStatus(Game.gameStatuses.lose);\n  }\n\n  refreshTable(game.board);\n  updateGameField(game.board);\n}\n\nfunction refreshTable(initialState) {\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  fieldRows.forEach((row, rowIndex) => {\n    const columns = row.children;\n\n    Array.from(columns).forEach((cell, columnIndex) => {\n      const stateCell = initialState[rowIndex][columnIndex];\n\n      cell.className = 'field-cell field-cell--' + stateCell;\n      cell.innerText = stateCell > 0 ? stateCell : '';\n    });\n  });\n}\n","'use strict';\n\nclass Game {\n  static gameStatuses = {\n    idle: 'idle',\n    playing: 'playing',\n    lose: 'lose',\n    win: 'win',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = Game.gameStatuses.idle;\n  }\n\n  saveBoardState() {\n    return JSON.parse(JSON.stringify(this.board));\n  }\n\n  hasBoardChanged(oldBoard, newBoard) {\n    for (let i = 0; i < oldBoard.length; i++) {\n      for (let j = 0; j < oldBoard[i].length; j++) {\n        if (oldBoard[i][j] !== newBoard[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addCells(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.addRandomTitle();\n    }\n  }\n\n  initializeGame(message = '') {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n\n    this.addCells(2);\n\n    this.updateScoreDisplay();\n    this.showMessage(message);\n  }\n\n  updateScoreDisplay() {\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  createEmptyBoard() {\n    return Array(4)\n      .fill(null)\n      .map(() => Array(4).fill(0));\n  }\n\n  updateBoardDisplay() {\n    const { board } = this;\n\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n\n      cell.textContent = board[row][col] === 0 ? '' : board[row][col];\n      cell.className = 'field-cell';\n\n      if (board[row][col] !== 0) {\n        cell.classList.add(`tile-${board[row][col]}`);\n      }\n    });\n  }\n\n  addRandomTitle() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [randomRow, randomCol] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n\n    this.updateBoardDisplay();\n  }\n\n  moveLeft() {\n    const { board } = this;\n    const oldBoard = this.saveBoardState();\n    const newBoard = Array.from({ length: 4 }, () => Array(4).fill(0));\n    let score = 0;\n\n    for (let i = 0; i < 4; i++) {\n      let position = 0;\n\n      for (let j = 0; j < 4; j++) {\n        if (board[i][j] !== 0) {\n          if (newBoard[i][position] === board[i][j]) {\n            newBoard[i][position] *= 2;\n            score += newBoard[i][position];\n\n            position++;\n          } else if (newBoard[i][position] === 0) {\n            newBoard[i][position] = board[i][j];\n          } else {\n            position++;\n            newBoard[i][position] = board[i][j];\n          }\n        }\n      }\n    }\n\n    this.score += score;\n\n    this.board = newBoard;\n\n    if (this.hasBoardChanged(oldBoard, this.board)) {\n      this.addRandomTitle();\n    }\n\n    this.updateBoardDisplay();\n    this.updateScoreDisplay();\n\n    return this.score;\n  }\n\n  moveRight() {\n    const { board } = this;\n    const oldBoard = this.saveBoardState();\n    const newBoard = Array.from({ length: 4 }, () => Array(4).fill(0));\n    let score = 0;\n\n    for (let i = 0; i < 4; i++) {\n      let position = 3;\n\n      for (let j = 3; j >= 0; j--) {\n        if (board[i][j] !== 0) {\n          if (newBoard[i][position] === board[i][j]) {\n            newBoard[i][position] *= 2;\n            score += newBoard[i][position];\n            position--;\n          } else if (newBoard[i][position] === 0) {\n            newBoard[i][position] = board[i][j];\n          } else {\n            position--;\n            newBoard[i][position] = board[i][j];\n          }\n        }\n      }\n    }\n\n    this.score += score;\n    this.board = newBoard;\n\n    if (this.hasBoardChanged(oldBoard, this.board)) {\n      this.addRandomTitle();\n    }\n\n    this.updateScoreDisplay();\n\n    return this.score;\n  }\n\n  moveUp() {\n    const { board } = this;\n    const oldBoard = this.saveBoardState();\n    const newBoard = Array.from({ length: 4 }, () => Array(4).fill(0));\n    let score = 0;\n\n    for (let j = 0; j < 4; j++) {\n      let position = 0;\n\n      for (let i = 0; i < 4; i++) {\n        if (board[i][j] !== 0) {\n          if (newBoard[position][j] === board[i][j]) {\n            newBoard[position][j] *= 2;\n            score += newBoard[position][j];\n            position++;\n          } else if (newBoard[position][j] === 0) {\n            newBoard[position][j] = board[i][j];\n          } else {\n            position++;\n            newBoard[position][j] = board[i][j];\n          }\n        }\n      }\n    }\n\n    this.score += score;\n    this.board = newBoard;\n\n    if (this.hasBoardChanged(oldBoard, this.board)) {\n      this.addRandomTitle();\n    }\n\n    this.updateScoreDisplay();\n\n    return this.score;\n  }\n\n  moveDown() {\n    const { board } = this;\n    const oldBoard = this.saveBoardState();\n    const newBoard = Array.from({ length: 4 }, () => Array(4).fill(0));\n    let score = 0;\n\n    for (let j = 0; j < 4; j++) {\n      let position = 3;\n\n      for (let i = 3; i >= 0; i--) {\n        if (board[i][j] !== 0) {\n          if (newBoard[position][j] === board[i][j]) {\n            newBoard[position][j] *= 2;\n            score += newBoard[position][j];\n            position--;\n          } else if (newBoard[position][j] === 0) {\n            newBoard[position][j] = board[i][j];\n          } else {\n            position--;\n            newBoard[position][j] = board[i][j];\n          }\n        }\n      }\n    }\n\n    this.score += score;\n    this.board = newBoard;\n\n    if (this.hasBoardChanged(oldBoard, this.board)) {\n      this.addRandomTitle();\n    }\n\n    this.updateScoreDisplay();\n\n    return this.score;\n  }\n\n  checkWin() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 2048) {\n          this.showMessage(Game.gameStatuses.win);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (\n          (i < 3 && this.board[i][j] === this.board[i + 1][j]) ||\n          (j < 3 && this.board[i][j] === this.board[i][j + 1])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    this.showMessage(Game.gameStatuses.lose);\n\n    return true;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    if (this.checkWin()) {\n      return Game.gameStatuses.win;\n    } else if (this.checkLose()) {\n      return Game.gameStatuses.lose;\n    } else {\n      return this.status;\n    }\n  }\n\n  start() {\n    this.status = Game.gameStatuses.playing;\n    this.initializeGame('start');\n  }\n\n  restart() {\n    this.status = Game.gameStatuses.idle;\n    this.initializeGame('Game restarted');\n  }\n\n  showMessage(message) {\n    const messageContainer = document.querySelector('.message-container');\n\n    if (messageContainer) {\n      messageContainer.querySelector('.message-start').classList.add('hidden');\n      messageContainer.querySelector('.message-lose').classList.add('hidden');\n      messageContainer.querySelector('.message-win').classList.add('hidden');\n    }\n\n    if (message === Game.gameStatuses.win) {\n      messageContainer.querySelector('.message-win').classList.remove('hidden');\n    } else if (message === Game.gameStatuses.lose) {\n      messageContainer\n        .querySelector('.message-lose')\n        .classList.remove('hidden');\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","gameStatuses","idle","playing","lose","win","constructor","initialState","board","createEmptyBoard","score","status","saveBoardState","JSON","parse","stringify","hasBoardChanged","oldBoard","newBoard","i","length","j","addCells","count","addRandomTitle","initializeGame","message","updateScoreDisplay","showMessage","scoreElement","document","querySelector","textContent","Array","fill","map","updateBoardDisplay","cells","querySelectorAll","forEach","cell","index","row","Math","floor","col","className","classList","add","emptyCells","push","randomRow","randomCol","random","moveLeft","from","position","moveRight","moveUp","moveDown","checkWin","checkLose","getScore","getState","getStatus","start","restart","messageContainer","remove","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","getElementById","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$initializeGame","$09e991522ca7e64e$var$refreshTable","$09e991522ca7e64e$var$updateGameField","style","display","value","$09e991522ca7e64e$var$checkGameStatus","gameStatus","removeEventListener","$09e991522ca7e64e$var$handleKeyPress","e","action","moveActions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","key","fieldRows","rowIndex","children","columnIndex","stateCell","innerText","addEventListener"],"version":3,"file":"index.f0b3250e.js.map"}